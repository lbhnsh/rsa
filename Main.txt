import java.nio.charset.StandardCharsets;
import java.security.*;
import java.util.Base64;

public class Main {

    public static void main(String[] args) throws Exception {
        // Sample PACS.008 message (simplified)
        String message = """
            <Document xmlns="urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02">
                <FIToFICstmrCdtTrf>
                    <GrpHdr>
                        <MsgId>ABC123456789</MsgId>
                        <CreDtTm>2025-06-15T11:25:00</CreDtTm>
                        <NbOfTxs>1</NbOfTxs>
                    </GrpHdr>
                    <CdtTrfTxInf>
                        <PmtId>
                            <InstrId>INST-001</InstrId>
                            <EndToEndId>E2E-001</EndToEndId>
                        </PmtId>
                        <Amt>
                            <InstdAmt Ccy="INR">1000000.00</InstdAmt>
                        </Amt>
                        <Cdtr>
                            <Nm>XYZ Enterprises</Nm>
                        </Cdtr>
                    </CdtTrfTxInf>
                </FIToFICstmrCdtTrf>
            </Document>
            """;

        // Step 1: Generate RSA key pair (for demo — in real use, load from keystore)
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(2048); // 2048-bit RSA
        KeyPair keyPair = keyGen.generateKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        PublicKey publicKey = keyPair.getPublic();
        
        System.out.println("pvt:\n" + privateKey);
        System.out.println("pub:\n" + publicKey);
        
        // Step 2: Sign the message
        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initSign(privateKey);
        signer.update(message.getBytes(StandardCharsets.UTF_8));
        byte[] signatureBytes = signer.sign();
        String signatureBase64 = Base64.getEncoder().encodeToString(signatureBytes);

        // Output detached signature
        System.out.println("Original Message:\n" + message);
        System.out.println("\nDetached Signature (Base64):\n" + signatureBase64);

        // Step 3: Verification
        Signature verifier = Signature.getInstance("SHA256withRSA");
        verifier.initVerify(publicKey);
        verifier.update(message.getBytes(StandardCharsets.UTF_8));
        boolean isValid = verifier.verify(Base64.getDecoder().decode(signatureBase64));

        System.out.println("\nVerification result: " + (isValid ? "✅ VALID" : "❌ INVALID"));
    }
}
