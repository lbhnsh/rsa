import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.KeyStore;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.X509Certificate;
import java.util.Base64;

public class SimpleSignatureVerifier {

    public static void main(String[] args) throws Exception {
        // Step 1: Load public key from PFX file
        FileInputStream fis = new FileInputStream("sample_cert.pfx");
        KeyStore ks = KeyStore.getInstance("PKCS12");
        ks.load(fis, "password".toCharArray());
        String alias = ks.aliases().nextElement();
        X509Certificate cert = (X509Certificate) ks.getCertificate(alias);
        PublicKey publicKey = cert.getPublicKey();

        // Step 2: Load signature from file (Base64)
        byte[] signatureBytes = Base64.getMimeDecoder().decode(
            new String(Files.readAllBytes(new File("signature.txt").toPath()), StandardCharsets.UTF_8)
        );

        // Step 3: Read XML and extract payload after </AppHdr>
        String xml = new String(Files.readAllBytes(new File("sample_pacs008.xml").toPath()), StandardCharsets.UTF_8);
        String payload = xml.replaceAll("(?s).*?</AppHdr>", "").trim();
        byte[] dataToVerify = payload.getBytes(StandardCharsets.UTF_8);

        // Step 4: Verify using SHA256withRSA
        Signature verifier = Signature.getInstance("SHA256withRSA");
        verifier.initVerify(publicKey);
        verifier.update(dataToVerify);

        boolean isValid = verifier.verify(signatureBytes);
        System.out.println("Signature valid? " + (isValid ? "✅ YES" : "❌ NO"));
    }
}
